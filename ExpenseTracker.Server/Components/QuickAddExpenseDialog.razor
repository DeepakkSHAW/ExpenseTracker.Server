@using System.Linq;
@inject Microsoft.Extensions.Configuration.IConfiguration configuration

@if (ShowDialog)
{
    <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header bg-primary">
                    <h5 class="modal-title" id="titleLable">@dialogTitle</h5>
                    <button class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                        <span aria-hidden="false">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@aExpense" OnValidSubmit="@HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                                @*<div><label for="Test" class="col-sm-10">@ExpenseId</label></div>*@
                                <div class="form-group row">
                                    <label for="title" class="col-sm-3" style="height:15px; font-size:small">Title: </label>
                                    <InputText id="title" class="form-control col-sm-7" @bind-Value="@aExpense.ExpenseTitle"
                                               placeholder="Enter Expense Title" maxlength=50></InputText>
                                    <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => aExpense.ExpenseTitle)" />
                                </div>

                                <div class="form-group row">
                                    <label for="expensedate" class="col-sm-3">Date: </label>
                                    <InputDate id="expensedate" class="form-control col-sm-4" @bind-Value="@aExpense.ExpenseDate" placeholder="Enter Expense Date"></InputDate>
                                </div>

                                <div class="form-group row">
                                    <label for="amount" class="col-sm-3">Amount: </label>
                                    @*<InputText id="amount" class="form-control col-sm-3" style="text-align:right;" @bind-Value="@eAmount" placeholder="0.0" maxlength="12"></InputText>*@
                                    <InputNumber id="amount" class="form-control col-sm-3 text-right" @bind-Value="@aExpense.ExpensesAmount" placeholder="0.0" maxlength="12"></InputNumber>

                                </div>

                                <div class="form-group row">
                                    <label for="country" class="col-sm-3">Categories: </label>
                                    @*<InputSelect id="country" class="form-control col-sm-4" @bind-Value="@eCatID">
                        @foreach (var cat in Categories)
                            {
                            <option value="@cat.Id">@cat.Category</option>
                            }
                    </InputSelect>*@
                                    <InputSelectNumber id="Category" class="form-control col-sm-4" @bind-Value="@aExpense.ExpenseCategoryId">
                                        <option value=-1>Select a category</option>
                                        @foreach (var cat in categories)
                                            {
                                            <option value="@cat.Id">@cat.Category</option>
                                            }
                                        /**/
                                    </InputSelectNumber>
                                </div>
                                <div class="text-left">
                                    Signature: <strong>@aExpense.Signature</strong> &nbsp; &nbsp;
                                    Currency: <strong>@aExpense.Currency.CurrencyName</strong> &nbsp; &nbsp;
                                    Payment Method: <strong>@aExpense.PaymentMethod</strong> &nbsp; &nbsp;
                                    Payment Type: <strong>@aExpense.PaymentType</strong> &nbsp; &nbsp;
                                </div>
                                <br />
                                <button type="submit" class="btn btn-primary">@submitTitle</button>&nbsp;&nbsp;
                                <a class="btn btn-outline-primary" @onclick="@Close">Close</a>

                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}
@code {
    public bool ShowDialog { get; set; }

    [Inject]
    protected ExpenseTracker.Data.Services.IExpenseRepository srvExpense { get; set; }
    ExpenseTracker.Data.Expense aExpense;

    [Inject]
    protected ExpenseTracker.Data.Services.ICategoryRepository srvCategoties { get; set; }
    protected List<ExpenseTracker.Data.ExpenseCategory> categories;

    [Inject]
    protected ExpenseTracker.Data.Services.ICurrencyRepository srvCurrency { get; set; }
    protected List<ExpenseTracker.Data.Currency> currencies;

    [Parameter] public EventCallback<bool> CloseEventCallback { get; set; }
    public int ExpenseId { get; set; }
    protected string dialogTitle = string.Empty;
    protected string submitTitle = string.Empty;


    public async Task Show(int expenseId)
    {
        //ResetDialog();
        ExpenseId = expenseId;

        if (ExpenseId > 0) //Getting ready to Edit existing Expense
        {
            aExpense = await srvExpense.GetExpensesAsync(ExpenseId);
            dialogTitle = "Quick Update Expense";
            submitTitle = "Update Expense";
        }
        else //Getting ready to Add a New Expnse
        {
            var default_cur = configuration["DefaultCurrency"];
            var default_cat = configuration["DefaultCategory"];
            var default_typ = configuration["DefaultPaymentType"];
            var default_mth = configuration["DefaultPaymentMethod"];
            var default_sig = configuration["DefaultSignature"];
            dialogTitle = "Quick Add New Expense";
            submitTitle = "Save Expense";

            aExpense = new ExpenseTracker.Data.Expense();

            aExpense.CurrencyId = int.Parse(default_cur);
            aExpense.ExpenseCategoryId = int.Parse(default_cat);
            aExpense.Signature = default_sig;
            aExpense.Currency = currencies.Find(e => e.Id == aExpense.CurrencyId); 
            aExpense.PaymentMethod = (ExpenseTracker.Data.PaymentMethod)Enum.Parse(typeof(ExpenseTracker.Data.PaymentMethod), default_mth);
            aExpense.PaymentType = (ExpenseTracker.Data.PaymentType)Enum.Parse(typeof(ExpenseTracker.Data.PaymentType), default_typ);
        }

        ShowDialog = true;

        StateHasChanged();
    }

    private void ResetDialog()
    {
    }

    public async Task Close()
    {
        ShowDialog = false;
        await CloseEventCallback.InvokeAsync(false);
        StateHasChanged();
    }

    protected async Task HandleValidSubmit()
    {
        int newID = -1;
        if (ExpenseId < 1) //New
        {
            aExpense.PaymentMethod = ExpenseTracker.Data.PaymentMethod.Card;
            aExpense.PaymentType = ExpenseTracker.Data.PaymentType.Paid;

            newID = await srvExpense.NewExpensesAsync(aExpense);
        }
        else //Update
        {
            newID = await srvExpense.EditExpensesAsync(aExpense, ExpenseId);
        }

        ShowDialog = false;

        await CloseEventCallback.InvokeAsync(true);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {

        categories = (await srvCategoties.GetCategoriesAsync(true)).ToList();
        currencies = (await srvCurrency.GetCurrencyAsync(true)).ToList();
    }

}
