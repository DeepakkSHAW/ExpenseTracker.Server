@using System.ComponentModel
<select id="expensedate" class="col-sm-3" @onchange="DropDownChanges">
    @foreach (var mth in Enum.GetValues(typeof(Months)))
    {
        if (SelectedMonth == (Months)mth)
        {
            //Console.WriteLine(mth);
            <option value="@(Convert.ToInt32(mth))" selected>@mth</option>
        }
        else
        {
            //Console.WriteLine(mth);
            <option value="@(Convert.ToInt32(mth))">@mth</option>
        }
    }

</select>

@code
{
    public enum Months {[Description("Team Manager")] Year = -1, January, February, March, April, May, June, July, August, September, October, November, December }
    [Parameter] public EventCallback<Tuple<DateTime, DateTime>> OnDropDownChange { get; set; }
    [Parameter] public Months SelectedMonth { get; set; } = Months.Year;

    protected override void OnInitialized()
    {
        //base.OnInitialized();

        //Console.WriteLine(SelectedMonth);
        //TODO: Display Enum Friendly Name

    }

public async Task DropDownChanges(ChangeEventArgs e)
{
DateTime firstDayOfMonth = new DateTime(DateTime.Now.Year, 1, 1);
DateTime lastDayOfMonth = new DateTime(DateTime.Now.Year, 12, 31);

if (e.Value.ToString() != "-1")
{
    SelectedMonth = (Months)Enum.Parse(typeof(Months), e.Value.ToString());

    firstDayOfMonth = DateTime.ParseExact(SelectedMonth.ToString(), "MMMM", System.Globalization.CultureInfo.InvariantCulture);
    lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
}

await OnDropDownChange.InvokeAsync(new Tuple<DateTime, DateTime>(firstDayOfMonth, lastDayOfMonth));
}
}
