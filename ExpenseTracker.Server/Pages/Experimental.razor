@page "/Experimental"
@using ExpenseTracker.Server.Components
@using System.Linq
@using Blazorise.Charts

<h3>Experimental Page</h3>
<br />
<div class="container border border-primary">
    <div class="row border border-primary">
        <div class="col-9  border border-primary">DK</div>
        <div class="col  border border-primary">Rups</div>
        <div class="w-100 border border-primary"></div>
        <div class="col border border-primary">Jag</div>
        <div class="col border border-primary">Divs</div>
        <div class="w-100 border border-primary"></div>
        <div class="col border border-primary">poc</div>
    </div>
</div>

<button type="button" class="btn btn-tumblr"><span class="cib-tumblr btn-icon mr-2"></span> Tumblr</button>
<br>
<button class="btn btn-primary float-right search disabled" disabled><span class='fa-left fas fa-sync-alt spinning'></span>Searching...</button>
<br>

@*<ETDashBoard title="Expense Tracker Dash Board" />*@


@*<Input type="button" Clicked="@(async () => await HandleRedraw())">Redraw</input>*@
<input type="range" step="1"
       @bind-value="SliderValue"
       @bind-value:event="oninput" />
<p>Slider Value: <b>@SliderValue</b></p>

<div class="card" style="width: 24rem;">
    <div class="card-body m-0 p-0">
        <LineChart @ref="lineChart" TItem="double" />
    </div>
</div>
<a class="btn btn-outline-primary" @onclick="@(async () => await HandleRedraw())">Reload</a>
@code {
    int SliderValue = 0;

    protected override async Task OnInitializedAsync() { }


    LineChart<double> lineChart;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        lineChart.Clear();

        lineChart.AddLabel(Labels);

        lineChart.AddDataSet(GetLineChartDataset());

        await lineChart.Update();
    }

    LineChartDataset<double> GetLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "# of randoms",
            Data = RandomizeData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors,
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> { r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble() };
    }

}
