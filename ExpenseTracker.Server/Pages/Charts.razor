@page "/Charts"

@using System.Linq
@using ExpenseTracker.Server.Components
@inject ExpenseTracker.Data.Services.IExpenseRepository ExpRepo



<div class="card" style="width: 24rem;">
    <div class="card-body">
        <Chart @ref="barChart" Type="ChartType.Bar" TItem="double" />
    </div>
</div>
<a class="btn btn-outline-primary" @onclick="@(async () => await HandleRedraw())">Reload</a>

@code
{
    private IEnumerable<ExpenseTracker.Data.Expense> expenses;
    private List<double> dailyExpense = new List<double>();
    protected override async Task OnInitializedAsync()
    {
        DateTime firstDayOfMonth = new DateTime(DateTime.Now.Year, 1, 1);
        DateTime lastDayOfMonth = new DateTime(DateTime.Now.Year, 1, 31);
        expenses = await ExpRepo.GetExpensesAsync(firstDayOfMonth, lastDayOfMonth);
        dailyExpense.Clear();
        List<string> localLebal = new List<string>();
        foreach (var expPerDay in expenses.GroupBy(dt => dt.ExpenseDate))
        {
            dailyExpense.Add(expPerDay.Sum(exp => exp.ExpensesAmount));
            localLebal.Add(expPerDay.Key.ToString("dd-MMM-yy"));
        }
        Labels = localLebal.ToArray();
    }

}

@code{
        //LineChart<double> lineChart;
        Chart<double> barChart;

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                await HandleRedraw();
            }
        }

        async Task HandleRedraw()
        {
            //lineChart.Clear();

            //lineChart.AddLabel(Labels);

            //lineChart.AddDataSet(GetLineChartDataset());

            //await lineChart.Update();

            barChart.Clear();

            barChart.AddLabel(Labels);

            barChart.AddDataSet(GetBarChartDataset());

            await barChart.Update();
        }

        LineChartDataset<double> GetLineChartDataset()
        {
            return new LineChartDataset<double>
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                Fill = true,
                PointRadius = 2,
                BorderDash = new List<int> { }
            };
        }

        BarChartDataset<double> GetBarChartDataset()
        {
            return new BarChartDataset<double>
            {
                Label = "# as on",
                //Data = RandomizeData(),
                Data = dailyExpense,
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
                BorderWidth = 1,
                
            //HoverBackgroundColor = backgroundColors,
            //HoverBorderColor = borderColors,
            //HoverBorderWidth = 2

        };
    }

    string[] Labels = { "Dk", "Rs", "Ds", "Js", "Dp", "Rd" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        List<double> rndData = new List<double> { r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble(), r.Next(3, 50) * r.NextDouble() };
        return rndData;
    }
}
