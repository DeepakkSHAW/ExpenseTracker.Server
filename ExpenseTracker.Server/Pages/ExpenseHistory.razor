@page "/ExpenseHistory"
@inject Microsoft.Extensions.Configuration.IConfiguration configuration
@using System.IO
@using System.Text
@using System.Globalization;
@using ExpenseTracker.Server.Components

<DateTreeExpenses DateRange="@_dateRange" Expenses="@_expenses" OnNodeClicked="OnNode_Clicked">
    <ChildContent>
        @foreach (var exp in _expenses.Where(e => e.ExpenseDate == _theDate))
        {
            <small>
                <div class="row border-0 border-primary ml-5 p-0">
                    <div class="col-1 border-0 border-primary">[@exp.Id]</div>
                    <div class="col-4 border-0 border-primary"><b>@exp.ExpenseTitle</b></div>
                    <div class="col-1 border-0 border-primary">@exp.ExpensesAmount.ToString("N2")</div>
                    <div class="col-1 border-0 border-primary">@exp.Currency.CurrencyName</div>
                    <div class="col-2 border-0 border-primary">@exp.Category.Category</div>
                    <div class="col-1 border-0 border-primary">@exp.PaymentMethod</div>
                    <div class="col-1 border-0 border-primary">@exp.PaymentType</div>
                </div>
            </small>
        }
    </ChildContent>
</DateTreeExpenses>

@code
{
    [Inject]
    private Data.Services.IExpenseRepository srvExpense { get; set; }
    private List<Data.Expense> _expenses;
    //private Data.Expense _expense;
    private List<DateTime> _dateRange;
    private DateTime _theDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        var range = await srvExpense.GetExpenseRangeDatesAsync();
        var from = range.Item1;
        var to = range.Item2;

        //*Ref: List of all dates between 2 dates *//
        _dateRange = Enumerable.Range(0, 1 + to.Subtract(from).Days)
          .Select(offset => from.AddDays(offset))
          .ToList();
        _expenses = new List<Data.Expense>();
        //var dt = GetDates(from, to).Select(x => x.ToString("MMMM yyyy")).ToArray();
    }
    private async Task OnNode_Clicked(DateTime theDate)
    {
        _theDate = theDate;
        System.Diagnostics.Debug.WriteLine($"OnNode_Clicked {theDate}");
        if (_expenses.Where(e => e.ExpenseDate == theDate).Count() == 0)
        {
            var expenses = await srvExpense.GetExpensesAsync(theDate, theDate);
            //_expenses = expenses.ToList();

            //*ref copy items from list to list
            _expenses.AddRange(expenses);
        }
    }
}
