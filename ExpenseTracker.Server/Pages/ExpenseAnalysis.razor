@page "/ExpenseAnalysis"
@using System.Globalization;
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.BubbleChart
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Wrappers
@using ChartJs.Blazor.Util

<h4>Expense Analysis</h4>


<EditForm Model="@aDate" OnValidSubmit="HandleValidSubmit">
    <div class="container border border-info border-0">
        <div class="row border border-info border-0">
            <div class="col-2  border border-primary border-0 text-right">Start Date:</div>
            <div class="col-4  border border-primary border-0 text-left">
                <InputDate id="expensesdate" class="form-control form-control-sm col-4" @bind-Value="@_startDate" @oninput="@ResetError" placeholder="Enter Expense start Date"></InputDate>
            </div>


            <div class="col-2 border border-primary border-0 text-right">End Date:</div>
            <div class="col-4 border border-primary border-0 text-left">
                <InputDate id="expenseedate" class="form-control form-control-sm col-4" format-value="yyyy-MM-dd" @bind-Value="@_endDate" @oninput="@ResetError" placeholder="Enter Expense end Date"></InputDate>
            </div>
            <div class="w-100 border border-primary border-0"></div>

            <div class="col border border-primary border-0 text-right">
                <button type="submit" class="bg-white"> Analyze </button>
            </div>
            <div class="w-100 border border-primary border-0"></div>

            <div class="col bg-light rounded border border-success text-center">

                @if (_hasError)
                {
                    @_errorMsg
                }
                else
                {
                    <p>
                        Average expense: <b> @Math.Round(_avgExpenses, 2)</b>
                        Highest expense: <b> @Math.Round(_higExpenses, 2)</b>
                        Lowest expense:  <b> @Math.Round(_lowExpenses, 2)</b>
                    </p>
                }
            </div>
        </div>
    </div>
</EditForm>

<div class="container border border-info border-0">

    <div class="row border border-info border-0">
        <div class="w-100 border border-primary border-0"></div>

        <div class="col-6  border border-primary border-0 text-center">
            <ChartJsBubbleChart @ref="_bubbleChartJs" Config="@_bubbleConfig" Width="150" Height="150" />
        </div>
        <div class="col-6  border border-primary border-0 text-center">
            <ChartJsBarChart @ref="_barChartJs" Config="@_barConfig" Width="150" Height="150" />
        </div>
    </div>

    <div class="w-100 border border-primary border-0"></div>

    <div class="row border border-info border-0">
        <div class="w-100 border border-primary border-0"></div>

        <div class="col-6  border border-primary border-0 text-center">
            <ChartJsPieChart @ref="_pieChartJs" Config="@_pieConfig" Width="150" Height="150" />

        </div>
        <div class="col-6  border border-primary border-0 text-center">
            <ChartJsPieChart @ref="_doughnutChartJs" Config="@_dnutConfig" Width="150" Height="150" />
        </div>
    </div>
</div>

@code {
    //protected class AnalysisHelper
    //{
    //    protected DateTime startDate { get; set; }
    //    protected DateTime endtDate { get; set; }
    //}
    //private AnalysisHelper _analysisHelper = new AnalysisHelper();

    private bool _hasError = false;
    private string _errorMsg = string.Empty;

    private DateTime aDate = DateTime.Now;
    [Inject]
    protected ExpenseTracker.Data.Services.IExpenseRepository srvExpense { get; set; }
    private List<ExpenseTracker.Data.Expense> _expenses;

    private DateTime _startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime _endDate = DateTime.Now.AddMonths(1);

    private double _avgExpenses = 0;
    private double _higExpenses = 0;
    private double _lowExpenses = 0;

    private PieConfig _pieConfig;
    private PieConfig _dnutConfig;
    private BubbleConfig _bubbleConfig;
    private BarConfig _barConfig;
    private ChartJsBarChart _barChartJs;
    private ChartJsPieChart _pieChartJs;
    private ChartJsPieChart _doughnutChartJs;
    private ChartJsBubbleChart _bubbleChartJs;

    private List<string> initial_backgroundColors = new List<string> {
        ColorUtil.ColorString(200, 100, 30, 0.2f), ColorUtil.ColorString(205, 195, 175, 0.2f),
        ColorUtil.ColorString(200, 90, 100, 0.2f), ColorUtil.ColorString(200, 190, 100, 0.2f),
        ColorUtil.ColorString(255, 99, 132, 0.2f), ColorUtil.ColorString(54, 162, 235, 0.2f),
        ColorUtil.ColorString(255, 206, 86, 0.2f), ColorUtil.ColorString(75, 192, 192, 0.2f),
        ColorUtil.ColorString(153, 102, 255, 0.2f), ColorUtil.ColorString(255, 159, 64, 0.2f),
        ColorUtil.ColorString(49, 169, 86, 0.2f), ColorUtil.ColorString(20, 249, 240, 0.2f),
        ColorUtil.ColorString(50, 50, 250, 0.2f), ColorUtil.ColorString(175, 175, 240, 0.2f),
        ColorUtil.ColorString(150, 250, 150, 0.2f), ColorUtil.ColorString(205, 249, 140, 0.2f),
        ColorUtil.ColorString(150, 150, 2, 0.2f), ColorUtil.ColorString(180, 200, 180, 0.2f)};

    private List<string> initial_borderColors = new List<string> {
        ColorUtil.ColorString(200, 100, 30, 1f), ColorUtil.ColorString(205, 195, 175, 1f),
        ColorUtil.ColorString(200, 90, 100, 1f), ColorUtil.ColorString(200, 190, 100, 1f),
        ColorUtil.ColorString(255, 99, 132, 1f), ColorUtil.ColorString(54, 162, 235, 1f),
        ColorUtil.ColorString(255, 206, 86, 1f), ColorUtil.ColorString(75, 192, 192, 1f),
        ColorUtil.ColorString(153, 102, 255, 1f), ColorUtil.ColorString(255, 159, 64, 1f),
        ColorUtil.ColorString(49, 169, 86, 1f),ColorUtil.ColorString(20, 249, 240, 1f),
        ColorUtil.ColorString(50, 50, 250, 1f), ColorUtil.ColorString(175, 175, 240, 1f),
        ColorUtil.ColorString(150, 250, 150, 1f), ColorUtil.ColorString(205, 249, 140, 1f),
        ColorUtil.ColorString(150, 150, 2, 1f), ColorUtil.ColorString(180, 200, 180, 1f)};

    private Random _rand = new Random();

    protected override async Task OnInitializedAsync()
    {
        //TODO: Test and fix error when expense table is empty
        _endDate = _startDate.AddMonths(1).AddDays(-1);
        _hasError = false;
        _errorMsg = "";

        _pieConfig = new PieConfig
        {
            Options = new PieOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Categories wise expenses between the dates"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };

        _dnutConfig = new PieConfig
        {
            Options = new PieOptions(true)
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Expenses with payment method"
                },
                Responsive = true,
                Animation = new ArcAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                }
            }
        };

        _bubbleConfig = new BubbleConfig
        {
            Options = new BubbleOptions
            {
                //Title = new ChartJS.Common.Properties.OptionsTitle
                Title = new ChartJs.Blazor.ChartJS.Common.Properties.OptionsTitle
                {
                    Display = true,
                    Text = "Compare category wise weekly expenses",
                },
                Tooltips = new ChartJs.Blazor.ChartJS.Common.Properties.Tooltips
                {
                    Enabled = true,
                    //Mode = PieChartModel,
                    BackgroundColor = ColorUtil.ColorString(205, 195, 175, 1f),
                }

            }
        };

        _barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Weekly Expense categories collection (5 weeks max)"
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new BarCategoryAxis
                        {
                            BarThickness = BarThickness.Flex,
                            Stacked = true,
                        }
                    },
                    //YAxes = new List<CartesianAxis>
                    //{
                    //    new BarCategoryAxis
                    //    {
                    //       // BarThickness = BarThickness.Flex,
                    //        Stacked = true,
                    //       // Ticks = new ChartJs.Blazor.ChartJS.Common.Axes.Ticks.CategoryTicks { }
                    //    }
                    //}

                },
                Responsive = true
            }
        };

        await ChartRedraw();
    }
    protected void ResetError()
    {
        if (_startDate >= _endDate)
        {
            _hasError = true;
            _errorMsg = "Start Date can't be less than end date";
        }
        else
        {
            _hasError = false;
            _errorMsg = "";
        }
    }

    protected async Task HandleValidSubmit()
    {
        if (_startDate >= _endDate)
        {
            _hasError = true;
            _errorMsg = "Start Date can't be less than end date";
            return;
        }
        else
        {
            _hasError = false;
        }

        _pieConfig.Data.Datasets.Clear();
        _pieConfig.Data.Labels.Clear();
        await ChartRedraw();

    }

    private async Task ChartRedraw()
    {
        _expenses = (await srvExpense.GetExpensesAsync(_startDate, _endDate)).ToList();
        if (_expenses.Count() == 0) return;

        _avgExpenses = _expenses.Sum(e => e.ExpensesAmount) / (_endDate - _startDate).TotalDays;
        _higExpenses = _expenses.Max(e => e.ExpensesAmount);
        _lowExpenses = _expenses.Min(e => e.ExpensesAmount);
        //var message = $"Average expense: {_avgExpenses:N2} Highest expense {_higExpenses:N2} Lowest expense: {_lowExpenses:N2}";

        #region "Categorywise paichart"

        var paiChartData = _expenses.GroupBy(e => e.ExpenseCategoryId).
                Select(g => new
                {
                    Category = g.First().Category.Category,
                    Value = g.Sum(s => s.ExpensesAmount)
                }).OrderBy(o => o.Category);



        var pieSet = new PieDataset
        {
            BackgroundColor = initial_backgroundColors.ToArray(),
            BorderColor = initial_borderColors.ToArray(),
            BorderWidth = 0,

            HoverBackgroundColor = initial_borderColors.ToArray(),
            HoverBorderColor = initial_backgroundColors.ToArray(),
            HoverBorderWidth = 0,
        };

        _pieConfig.Data.Datasets.Clear();
        _pieConfig.Data.Labels.Clear();
        pieSet.Data.AddRange(paiChartData.Select(e => e.Value));
        _pieConfig.Data.Labels.AddRange(paiChartData.Select(e => e.Category));
        _pieConfig.Data.Datasets.Add(pieSet);
        #endregion

        #region "Payment method type doughnet chart"
        var doughnutChartData = _expenses.GroupBy(e => e.PaymentMethod).
        Select(g => new
        {
            PaymentMethod = g.First().PaymentMethod,
            Value = g.Sum(s => s.ExpensesAmount)
        }).OrderBy(o => o.PaymentMethod);

        var doughnutSet = new PieDataset
        {
            BackgroundColor = initial_backgroundColors.ToArray(),
            BorderWidth = 0,
            HoverBackgroundColor = initial_borderColors.ToArray(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff"
        };

        _dnutConfig.Data.Datasets.Clear();
        _dnutConfig.Data.Labels.Clear();
        doughnutSet.Data.AddRange(doughnutChartData.Select(e => e.Value));
        _dnutConfig.Data.Labels.AddRange(doughnutChartData.Select(e => e.PaymentMethod.ToString()));
        _dnutConfig.Data.Datasets.Add(doughnutSet);
        #endregion

        #region "Weekly basis top 5 categories expenses"
        //TODO: Top 5 category wise, weekly expenses
        var bubbleChartData = _expenses.GroupBy(g => new
        {
            //*Ref:GroupBy Weekly between the selected Period*//
            WeekNum = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(g.ExpenseDate, CalendarWeekRule.FirstDay, DayOfWeek.Monday),
            g.ExpenseCategoryId
        })
            .Select(e => new
            {
                Week = e.Key.WeekNum,
                Value = e.Sum(s => s.ExpensesAmount),
                CategoryName = e.First().Category.Category,
                CategoryId = e.First().ExpenseCategoryId
            }).OrderBy(o => o.Week).ThenBy(o => o.CategoryName); //System.Diagnostics.Debug.WriteLine(bubbleChartData.Count());

        var expenseBubbleData = new List<BubbleDataset>();

        if (_bubbleConfig.Data.Datasets != null)

            _bubbleConfig.Data.Datasets.Clear();
        //_bubbleConfig.Data.Datasets.RemoveAll();

        foreach (var weekly in bubbleChartData.Select(w => w.Week).Distinct())
        {
            var Data = new List<BubbleDataPoint>();
            foreach (var bubble in bubbleChartData.Where(e => e.Week == weekly))
            {
                // Data.Add(new BubbleDataPoint(_rand.NextDouble(), _rand.NextDouble(), 5 + _rand.NextDouble() * 10));
                Data.Add(new BubbleDataPoint(bubble.CategoryId, bubble.Week, bubble.Value / 20));
            }

            var aBubbleDataset = new BubbleDataset
            {
                Label = $"Week-{weekly}",
                BackgroundColor = ColorUtil.RandomColorString(),
                //HitRadius = 5,
                Data = Data,
                //TODO: Bubble chart tooltip to fix with correct text and values
            };

            expenseBubbleData.Add(aBubbleDataset);
            //System.Diagnostics.Debug.WriteLine(weekly);
        }

        //_bubbleConfig.Data.Datasets.Clear();

        _bubbleConfig.Data.Datasets = expenseBubbleData;

        #endregion

        #region "Weekly category wise expenses"
        var barChartData = _expenses.GroupBy(g => new
        {
            //GroupBy Weekly in the selected Period
            WeekNum = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(g.ExpenseDate, CalendarWeekRule.FirstDay, DayOfWeek.Monday),
            g.ExpenseCategoryId
        })
    .Select(e => new
    {
        Week = e.Key.WeekNum,
        Value = e.Sum(s => s.ExpensesAmount),
        CategoryName = e.First().Category.Category,
        CategoryId = e.First().ExpenseCategoryId
    }).OrderBy(o => o.Week).ThenBy(o => o.CategoryName);

        //TODO: bug to fix, if week falls in more then one year, date lable is wrong
        //bubbleChartData.Select(w => "Week-"+ w.Week).Distinct().ToArray();
        //string[] s = new[] { "JAG", "DIV" };

        var allCategories = barChartData.Select(c => c.CategoryName).Distinct().OrderBy(i => i);
        var allWeeks = barChartData.Select(w => w.Week).Distinct();

        _barConfig.Data.Labels.Clear();
        //Show only 5 weeks of data, meaning 4 bars maximum.
        foreach (var weekly in barChartData.Select(w => w.Week).Distinct().Take(5))
        {
            _barConfig.Data.Labels.Add(ExpenseTrackerHelper.FirstDateOfWeek(_startDate.Year, weekly).AddDays(7).ToString("dd-MMM-yy"));
        }

        _barConfig.Data.Datasets.Clear();
        foreach (var cat in allCategories)
        {
            int iCount = 0;
            double[] barDataRange = new double[allWeeks.Count()];

            var barDataset = new BarDataset<DoubleWrapper>
            {
                Label = cat,
                BackgroundColor = ColorUtil.RandomColorString(),
                BorderWidth = 1,
                HoverBackgroundColor = ColorUtil.ColorString(0, 0, 0, 0.1),
                HoverBorderColor = ColorUtil.RandomColorString(),
                HoverBorderWidth = 1,
                BorderColor = "#ffffff",
            };
            foreach (var week in allWeeks)
            {
                var v = barChartData.Where(i => i.Week == week && i.CategoryName == cat).FirstOrDefault();
                if (v != null)
                    barDataRange[iCount] = v.Value;

                iCount++;
            }
            barDataset.AddRange(barDataRange.Wrap());
            _barConfig.Data.Datasets.Add(barDataset);
        }
    }
    #endregion
}
}
