@page "/ExpenseTrackerDashBoard"
@using ExpenseTracker.Server.Components

@inject ExpenseTracker.Data.Services.IExpenseRepository ExpRepository

<QuickAddExpenseDialog @ref="QuickAddNewExpenseDialog" CloseEventCallback="@QuickAddNewExpenseDialog_OnDialogClose" />
<ExpenseDetailsDialog @ref="AddNewExpenseDetailsDialog" CloseEventCallback="@AddNewExpenseDetailsDialog_OnDialogClose" />
<AlertDialog @ref="DeleteConfirmationDialog" CloseEventCallback="@DeleteAlertDialog_OnDialogClose" dialogTitle="Delete Confirmation!" />

<div class="container border-0 border-primary">
    <div class="row border-0 align-middle">
        @*<div class="col"><ExpCustBarChart monthlyExpenses="mExpense" /></div>
            <div class="w-100"></div>*@
        <div class="col-5 text-left">
            <p class="text-left align-middle">Avg. Exp: @string.Format("{0:N2}", _avgExpenses)</p>
        </div>
        <div class="col-5 align-middle text-right">
            <span class="align-bottom" data-toggle="tooltip" title="Select Period">
                <InputSelectMonth DropdownStyle="col-sm-4" SelectedMonth="(InputSelectMonth.Months) DateTime.Now.Month-1 " OnDropDownChange="OnMonthChanges" />
            </span>
        </div>
        <div class="col-1 text-right align-top">
            @*//TODO:Alignment, its not working*@
            <span class="d-inline-block" data-toggle="tooltip" title="Quick Add New Expense">
                <button @onclick="@(() => ShowNewExpenseDailog(true, 0))" type="button" class="btn btn-lg oi oi-dashboard btn-outline-success" />
            </span>
        </div>
        <div class="col-1 text-left">
            <span class="d-inline-block" data-toggle="tooltip" title="Add New Expense">
                <button @onclick="@(() => ShowNewExpenseDailog(false, 0))" type="button" class="btn btn-lg oi oi-list-rich btn-outline-primary" />
            </span>
        </div>
    </div>
</div>

@if (expenses == null)
{
    <p><em>Loading...</em></p>
    _status = "Loading expenses..";
}
else
{
    <table class="table table-active table-sm table-hover">
        <thead class="thead-light rounded">
            <tr>
                <th class="p-0 m-0"></th>
                <th class="p-0 m-0 text-sm-left">Date</th>
                <th class="p-0 m-0 text-sm-center">Amount</th>
                <th class="p-0 m-0 text-sm-left">Expense Title</th>
                <th class="p-0 m-0 text-sm-left">Sing</th>
                <th class="p-0 m-0 text-sm-center"></th>
            </tr>
        </thead>
        <tbody class="bg-white">
            @foreach (var expense in expenses)
            {
                <tr>
                    <td class="m-0 p-0">
                        <span class="d-lg-inline-block" data-toggle="tooltip" title="Expense Detailed Info">
                            <button @onclick="@(() => ShowNewExpenseDailog(false, expense.Id))" type="button" class="btn btn-sm oi oi-spreadsheet btn-outline-primary" />
                            @*<button type="button" class="btn-circle btn-xl btn btn-secondary">&nbsp;&nbsp; i &nbsp;&nbsp;</button>*@
                        </span>
                        @*<button type="button" class="btn btn-danger btn-circle">
                                <i class="fa fa-pencil-square-o"></i>
                            </button>*@
                        @*//TODO: Check why round button is not displaying on page
                            // Icons list: https://iconify.design/icon-sets/oi/*@
                    </td>
                    <td class="m-0 p-0">@expense.ExpenseDate.ToString("dd-MMM-yy")</td>
                    <td class="m-0 p-0 text-sm-center">@expense.ExpensesAmount</td>
                    <td class="m-0 p-0">@expense.ExpenseTitle</td>
                    <td class="m-0 p-0">@expense.Signature</td>
                    <td class="m-0 p-0 text-right">
                        <span class="d-lg-inline-block" data-toggle="tooltip" title="Update Expense Details">
                            <button @onclick="@(() => ShowNewExpenseDailog(true, expense.Id))" class="btn btn-sm oi oi-pencil btn-outline-success" data-toggle="modal" data-target="#AddEditEmpModal" />
                        </span>
                        <span class="d-lg-inline-block" data-toggle="tooltip" title="Delete Expense">
                            <button @onclick="@(() => ShowAlertDialog(expense.Id))" class="btn btn-sm oi oi-trash btn-outline-warning" data-toggle="modal" data-target="#deleteEmpModal" />
                        </span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <ExpenseTracker.Server.Components.Pagination TotaPagesQuantity="_totalPageQuantity" CurrentPage="_currentPage" Radius="2" SelectedPage="SelectedPage" />
    <div class="col"><ExpCustBarChart monthlyExpenses="@mExpense" /></div>
}
<div class="bg-light rounded border border-success text-center">@_status</div>

@code
{
    //private string _dummyValue = string.Empty;
    private string _status { get; set; } = "status";
    private double _avgExpenses = 0;
    private int _totalPageQuantity = 0;
    private int _quantityPerPage = 0;
    private int _currentPage = 1;
    protected int _expenseID = -1;
    private DateTime _startDate { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime _endDate { get; set; } = DateTime.Now.AddMonths(1);

    private IEnumerable<ExpenseTracker.Data.Expense> expenses;
    private List<ExpenseTracker.Data.Expense> mExpense;

    protected QuickAddExpenseDialog QuickAddNewExpenseDialog { get; set; }
    protected ExpenseDetailsDialog AddNewExpenseDetailsDialog { get; set; }
    protected AlertDialog DeleteConfirmationDialog { get; set; }

    //**ComponentBase Events**//
    protected async Task OnMonthChanges(Tuple<DateTime, DateTime> theDate)
    {
        //DateTime todaysdate = DateTime.Now;
        _startDate = theDate.Item1;
        _endDate = theDate.Item2;
        _currentPage = 1;
        await LoadMonthlyExpenses();
        LoadExpensesPerPage();
    }
    public async void QuickAddNewExpenseDialog_OnDialogClose(bool e)
    {

        string[] msg = new string[] { "added", "updated" };

        if (e == true)
        {
            await LoadMonthlyExpenses();
            await SelectedPage(_currentPage);
            _status = $"Expense has been " + msg[(_expenseID > 0 ? 1 : 0)] + " successfully.";

        }
        StateHasChanged();
    }
    public async void AddNewExpenseDetailsDialog_OnDialogClose(ExpenseDetailsDialog.Operation e)
    {
        if (e != ExpenseDetailsDialog.Operation.Cancel)
        {
            await LoadMonthlyExpenses();
            await SelectedPage(_currentPage);
        }

        _status = $"Expense operation has been " + e;
        StateHasChanged();
    }
    protected async Task DeleteAlertDialog_OnDialogClose(bool e)
    {
        if (e)
        {
            //Confrim
            _status = "Selected Expense Deleted Successfully.";
            await ExpRepository.DeleteExpensesAsync(_expenseID);
            await LoadMonthlyExpenses();
            await SelectedPage(_currentPage);

            StateHasChanged();
        }
        else
        {
            //Declien
            _status = "Delete Operation Canceled.";
        }
    }

    protected async Task ShowAlertDialog(int expenseId = -1)
    {
        _expenseID = expenseId;
        string msg = "Are you sure, want to delete select expense";
        await DeleteConfirmationDialog.Show(msg);
    }
    protected async Task ShowNewExpenseDailog(bool IsQuickExpenses, int expenseId = -1)
    {
        _expenseID = expenseId;
        if (IsQuickExpenses)
            await QuickAddNewExpenseDialog.Show(expenseId);
        else
            await AddNewExpenseDetailsDialog.Show(expenseId);
    }
    private async Task SelectedPage(int page)
    {
        _currentPage = page;
        LoadExpensesPerPage(page);
    }

    //**Pages LifeCycle Methods**//
    protected override async Task OnInitializedAsync()
    {
        DateTime todaysdate = DateTime.Now;
        _startDate = new DateTime(todaysdate.Year, todaysdate.Month, 1);
        _endDate = _startDate.AddMonths(1).AddDays(-1);
        _quantityPerPage = 5;
        mExpense = new List<Data.Expense>();
        await LoadMonthlyExpenses();
        LoadExpensesPerPage();

        //return base.OnInitializedAsync();
    }

    //**Private Methods**//
    //private async Task LoadExpenses(int page = 1, int quantityPerPage = 5)
    //{
    //    ExpenseTracker.Data.PaginationDTO aPage =
    //            new ExpenseTracker.Data.PaginationDTO { Page = page, QuantityPerPage = quantityPerPage };

    //    var tuplePagination = await ExpRepository.GetExpensesAsync(_startDate, _endDate, aPage);
    //    expenses = tuplePagination.Item1;
    //    _totalPageQuantity = (int)tuplePagination.Item2;

    //    _status = $"Expnse data loaded.";

    //}
    //private async Task LoadMonthlyExpenses()
    //{
    //    mExpense = (await ExpRepository.GetExpensesAsync(_startDate, _endDate)).ToList();
    //    //_dummyValue = "change @" + DateTime.Now.ToShortTimeString();
    //}


    //NOTE: Alternative implimentation, since we have whole months expsnses anyway why not to filter pagination data from it
    //The above 2 methods re-written
    private void LoadExpensesPerPage(int page = 1, int quantityPerPage = 10)
    {
        var skipExpenses = (page - 1) * _quantityPerPage;
        expenses = mExpense.Skip(skipExpenses).Take(quantityPerPage).ToList();

        _status = $"Expnse data loaded.";
    }
    private async Task LoadMonthlyExpenses()
    {
        mExpense = (await ExpRepository.GetExpensesAsync(_startDate, _endDate)).ToList();
        _avgExpenses = mExpense.Sum(e => e.ExpensesAmount) / (_endDate - _startDate).TotalDays;
        _totalPageQuantity = (int)Math.Ceiling((double)mExpense.Count() / _quantityPerPage);
    }
}
